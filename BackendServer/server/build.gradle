plugins {
	id 'org.springframework.boot' version '3.5.3'
}

// 다른 모듈(emulator)에서 server의 클래스를 의존할 수 있도록 일반 JAR 생성 활성화
bootJar { 
    enabled = true 
    mainClass = 'com.example.ServerMain'
}
jar { enabled = true }

dependencies {
	implementation project(':support:common')
	implementation project(':support:business')
	implementation project(':support:database')
	implementation project(':support:global')
	implementation project(':support:log')
	
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	runtimeOnly 'com.mysql:mysql-connector-j'

	//swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

	// ✅ [추가] Jakarta 어노테이션 (@PostConstruct)
	implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'

	// ✅ JJWT 모든 구성요소를 implementation으로 변경
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// 로그인, 회원가입
	implementation 'org.springframework.boot:spring-boot-starter-security'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}
